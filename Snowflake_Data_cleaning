CREATE DATABASE RETAIL;

USE RETAIL;

USE SCHEMA PUBLIC;

CREATE OR REPLACE TABLE DEMOGRAPHIC_RAW
(AGE_DESC CHAR(20),
MARITAL_STATUS_CODE CHAR(15),
INCOME_DESC VARCHAR(40),
HOMEOWNER_DESC VARCHAR(40),
HH_COMP_DESC VARCHAR(50),
HOUSEHOLD_SIZE_DESC VARCHAR(50),
KID_CATEGORY_DESC VARCHAR(40),
HOUSEHOLD_KEY INT PRIMARY KEY
);

DROP TABLE DEMOGRAHIC_RAW;

CREATE OR REPLACE TABLE CAMPAIGN_DESC_RAW
(DESCRIPTION CHAR(10),
CAMPAIGN INT,
START_DAY INT,
END_DAY INT,
PRIMARY KEY (DESCRIPTION),
UNIQUE(CAMPAIGN));

CREATE OR REPLACE TABLE CAMPAIGN_RAW
(DESCRIPTION CHAR(10),
HOUSEHOLD_KEY INT,
CAMPAIGN INT,
FOREIGN KEY (DESCRIPTION) REFERENCES CAMPAIGN_DESC_RAW(DESCRIPTION),
FOREIGN KEY (CAMPAIGN) REFERENCES CAMPAIGN_DESC_RAW(CAMPAIGN),
FOREIGN KEY (HOUSEHOLD_KEY) REFERENCES DEMOGRAPHIC_RAW(HOUSEHOLD_KEY)
);

CREATE OR REPLACE TABLE PRODUCT_RAW
(PRODUCT_ID INT PRIMARY KEY,
MANUFACTURER INT,
DEPARTMENT VARCHAR(50),
BRAND VARCHAR(30),
COMMODITY_DESC VARCHAR(65),
SUB_COMMODITY_DESC VARCHAR(65),
CURR_SIZE_OD_PRODUCT VARCHAR(15)
);

CREATE OR REPLACE TABLE COUPON_RAW
(COUPON_UPC INT,
PRODUCT_ID INT,
CAMPAIGN INT,
FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT_RAW(PRODUCT_ID),
FOREIGN KEY (CAMPAIGN) REFERENCES CAMPAIGN_DESC_RAW(CAMPAIGN)
);

CREATE OR REPLACE TABLE COUPON_REDEMPTION_RAW
(HOUSEHOLD_KEY INT,
DAY INT,
COUPON_UPC INT,
CAMPAIGN INT,
FOREIGN KEY (HOUSEHOLD_KEY) REFERENCES DEMOGRAPHIC_RAW(HOUSEHOLD_KEY),
FOREIGN KEY (CAMPAIGN) REFERENCES CAMPAIGN_DESC_RAW (CAMPAIGN)
);

CREATE OR REPLACE TABLE TRANSACTION_RAW
(HOUSEHOLD_KEY INT,
BASKET_ID INT,
DAY INT,
PRODUCT_ID INT,
QUANTITY INT,
SALES_VALUE FLOAT,
STORE_ID INT,
REATAIL_DISC FLOAT,
TRANS_TIME INT,
WEEK_NO INT,
COUPON_DISC INT,
COUPON_MATCH_DISC INT,
FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT_RAW(PRODUCT_ID),
FOREIGN KEY (HOUSEHOLD_KEY) REFERENCES DEMOGRAPHIC_RAW(HOUSEHOLD_KEY)
);



CREATE OR REPLACE STORAGE integration s3_int
TYPE = EXTERNAL_STAGE
STORAGE_PROVIDER = S3
ENABLED = TRUE
STORAGE_AWS_ROLE_ARN ='arn:aws:iam::730335331663:role/Retailrole' 
STORAGE_ALLOWED_LOCATIONS =('s3://hfretailraw/');

DESC integration s3_int;


CREATE OR REPLACE STAGE RETAIL
URL ='s3://hfretailraw'
file_format = CSV_HF
storage_integration = s3_int;

LIST @RETAIL;

SHOW STAGES;

--CREATE SNOWPIPE THAT RECOGNISES CSV THAT ARE INGESTED FROM EXTERNAL STAGE AND COPIES THE DATA INTO EXISTING TABLE

--The AUTO_INGEST=true parameter specifies to read 
--- event notifications sent from an S3 bucket to an SQS queue when new data is ready to load.


CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_DEMOGRAPHIC AUTO_INGEST = TRUE AS
COPY INTO "RETAIL"."PUBLIC"."DEMOGRAPHIC_RAW" --yourdatabase -- your schema ---your table
FROM '@RETAIL/HH_DEMOGRAPHIC/' --s3 bucket subfolde4r name
FILE_FORMAT = CSV_HF; --YOUR CSV FILE FORMAT NAME

CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_CAMPAIGN_DESC AUTO_INGEST = TRUE AS
COPY INTO "RETAIL"."PUBLIC"."CAMPAIGN_DESC_RAW"
FROM '@RETAIL/CAMPAIGN_DESC/' 
FILE_FORMAT = CSV_HF;

CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_CAMPAIGN AUTO_INGEST = TRUE AS
COPY INTO "RETAIL"."PUBLIC"."CAMPAIGN_RAW"
FROM '@RETAIL/CAMPAIGN_TABLE/' 
FILE_FORMAT = CSV_HF;

CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_PRODUCT AUTO_INGEST = TRUE AS
COPY INTO "RETAIL"."PUBLIC"."PRODUCT_RAW"
FROM '@RETAIL/PRODUCT/' 
FILE_FORMAT = CSV_HF;


CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_COUPON AUTO_INGEST = TRUE AS
COPY INTO "RETAIL"."PUBLIC"."COUPON_RAW"
FROM '@RETAIL/COUPON/' 
FILE_FORMAT = CSV_HF;

CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_COUPON_REDEMPT  AUTO_INGEST = TRUE AS
COPY INTO "RETAIL"."PUBLIC"."COUPON_REDEMPTION_RAW"
FROM '@RETAIL/COUPON_REDEMPT/' 
FILE_FORMAT = CSV_HF;

CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_TRANSACTION  AUTO_INGEST = TRUE AS
COPY INTO "RETAIL"."PUBLIC"."TRANSACTION_RAW"
FROM '@RETAIL/TRANSACTION/' 
FILE_FORMAT = CSV_HF;

SHOW PIPES;

SELECT COUNT(*) FROM demographic_RAW;
SELECT COUNT(*) FROM CAMPAIGN_DESC_RAW;
SELECT COUNT(*) FROM CAMPAIGN_RAW;
SELECT COUNT(*) FROM PRODUCT_RAW;
SELECT COUNT(*) FROM COUPON_RAW;
SELECT COUNT(*) FROM COUPON_REDEMPTION_RAW;
SELECT COUNT(*) FROM TRANSACTION_RAW;

----------------------------------------------------------PIPEREFRESH-----------------------------------------------------------------

ALTER PIPE RETAIL_SNOWPIPE_DEMOGRAPHIC refresh;
ALTER PIPE  RETAIL_SNOWPIPE_CAMPAIGN_DESC refresh;
ALTER PIPE  RETAIL_SNOWPIPE_CAMPAIGN refresh;
ALTER PIPE  RETAIL_SNOWPIPE_PRODUCT refresh;
ALTER PIPE  RETAIL_SNOWPIPE_COUPON refresh;
ALTER PIPE  RETAIL_SNOWPIPE_COUPON_REDEMPT refresh;
ALTER PIPE  RETAIL_SNOWPIPE_TRANSACTION refresh;



SELECT * FROM DEMOGRAPHIC_RAW;
SELECT * FROM CAMPAIGN_DESC_RAW;
SELECT * FROM CAMPAIGN_RAW;
SELECT * FROM PRODUCT_RAW;
SELECT * FROM COUPON_RAW;
SELECT * FROM COUPON_REDEMPTION_RAW;
SELECT * FROM TRANSACTION_RAW
ORDER BY DAY ASC;

SELECT * FROM CAMPAIGN_DESC_NEW;
SELECT * FROM COUPON_REDEMPT_NEW;
SELECT * FROM TRANSACTION_NEW;

#Retail Data Analysis#

#KPIS

#1. Customer Demographics KPIs:
o Count of unique households: Measure the total number of unique households in
the Demographic table.

SELECT COUNT(*) AS UNIQUE_HOUSEHOLDS FROM DEMOGRAPHIC_RAW;

o Household composition distribution: Analyze the distribution of household
compositions (HH_COMP_DESC) to understand the composition of households.

SELECT HH_COMP_DESC,COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLDS 
FROM DEMOGRAPHIC_RAW
GROUP BY 1
ORDER BY 2 DESC;

o Age distribution: Calculate the percentage or count of customers in different age
groups (AGE_DESC).

SELECT AGE_DESC, COUNT(*) AS TOTAL, ROUND(TOTAL/2500*100,2) AS PERCENTAGE   
FROM DEMOGRAPHIC_RAW
GROUP BY AGE_DESC
ORDER BY 1 DESC;

o Marital status distribution: Analyze the proportion of customers in different
marital status categories (MARITAL_STATUS_CODE).

SELECT MARITAL_STATUS_CODE, COUNT(*) AS TOTAL , ROUND(TOTAL/2500*100,2) AS PERCENTAGE 
FROM DEMOGRAPHIC_RAW
GROUP BY 1;

o Income distribution: Determine the distribution of customers across income levels
(INCOME_DESC).

SELECT INCOME_DESC, COUNT(*)AS TOTAL, ROUND(TOTAL/2500*100,2) AS PERCENTAGE 
FROM DEMOGRAPHIC_RAW
GROUP BY 1
ORDER BY 2 DESC;
 

o Homeownership distribution: Calculate the percentage or count of customers who
own or rent their homes (HOMEOWNER_DESC).

SELECT HOMEOWNER_DESC , COUNT(*) AS TOTAL, ROUND(TOTAL/2500*100) AS PERCENTAGE  
FROM DEMOGRAPHIC_RAW
GROUP BY 1;

2. Campaign KPIs:
o Number of campaigns: Count the total number of campaigns in the Campaign
table.

SELECT COUNT(*) FROM CAMPAIGN_RAW;

SELECT * FROM CAMPAIGN_DESC_RAW;

SELECT * FROM CAMPAIGN_DESC_NEW;

o Campaign duration: Calculate the duration of each campaign by subtracting the
start day from the end day (in the Campaign_desc table).

SELECT DISTINCT DESCRIPTION, COUNT(DURATIONS_DAYS), SUM(DURATIONS_DAYS) FROM CAMPAIGN_DESC_NEW
GROUP BY 1;

o Campaign effectiveness: Analyze the number of households associated with each
campaign (in the Campaign table) to measure campaign reach.

SELECT 

3. Coupon KPIs:
o Coupon redemption rate: Calculate the percentage of coupons redeemed (from the
coupon_redempt table) compared to the total number of coupons distributed (from
the Coupon table).

SELECT * FROM COUPON_REDEMPT_NEW;
SELECT * FROM COUPON_RAW;


SELECT 
((SELECT COUNT(*) FROM coupon_redempt_new) * 100.0 / (SELECT COUNT(*) FROM COUPON_RAW)) AS redemption_rate_percentage;


o Coupon usage by campaign: Measure the number of coupon redemptions (from
the coupon_redempt table) for each campaign (in the Coupon table).

SELECT c.campaign,COUNT(cr.household_key) AS redemption_count
FROM Coupon_raw c LEFT JOIN coupon_redempt_new cr ON c.coupon_upc = cr.coupon_upc
GROUP BY  c.campaign;


4. Product KPIs:
o Sales value: Calculate the total sales value for each product (in the
Transaction_data table) to identify top-selling products.

SELECT * FROM PRODUCT_RAW;
SELECT COUNT(*) FROM PRODUCT_RAW;
SELECT * FROM TRANSACTION_NEW;

SELECT DISTINCT(P.PRODUCT_ID) AS ID, SUM(SALES_VALUE) AS TOTAL_SALES
FROM PRODUCT_RAW AS P LEFT JOIN TRANSACTION_NEW AS T 
ON P.PRODUCT_ID = T.PRODUCT_ID
GROUP BY P.PRODUCT_ID;

o Manufacturer distribution: Analyze the distribution of products across different
manufacturers (in the Product table).

SELECT MANUFACTURER,COUNT(*) AS product_count
FROM PRODUCT_RAW
GROUP BY MANUFACTURER;


o Department-wise sales: Measure the sales value by department (in the Product
table) to understand which departments contribute most to revenue.

SELECT DEPARTMENT, COUNT(*) AS TOTAL_SALES
FROM PRODUCT_RAW
GROUP BY 1;

SELECT P.DEPARTMENT AS BRAND, SUM(SALES_VALUE) AS TOTAL_SALES
FROM PRODUCT_RAW AS P LEFT JOIN TRANSACTION_NEW AS T 
ON P.PRODUCT_ID = T.PRODUCT_ID
GROUP BY 1
ORDER BY 2 DESC;

o Brand-wise sales: Calculate the sales value for each brand (in the Product table) to
identify top-selling brands.

SELECT BRAND, COUNT(*) AS TOTAL_SALES
FROM PRODUCT_RAW
GROUP BY 1;

SELECT P.BRAND AS BRAND, SUM(SALES_VALUE) AS TOTAL_SALES
FROM PRODUCT_RAW AS P LEFT JOIN TRANSACTION_NEW AS T 
ON P.PRODUCT_ID = T.PRODUCT_ID
GROUP BY 1
ORDER BY 2 DESC;

5. Transaction KPIs:
o Total sales value: Calculate the sum of sales values (in the Transaction_data table)
to measure overall revenue.

SELECT * FROM TRANSACTION_NEW;

SELECT SUM(SALES_VALUE) AS TOTAL_REVENUE FROM TRANSACTION_NEW;

o Average transaction value: Calculate the average sales value per transaction to
understand customer spending patterns.

SELECT TRANS_TIME, AVG(SALES_VALUE) AS AVERAGE_OF_SALES
FROM TRANSACTION_NEW
GROUP BY 1
ORDER BY 2 DESC;

o Quantity sold: Measure the total quantity sold (in the Transaction_data table) to
understand product demand.

SELECT PRODUCT_ID, SUM(QUANTITY) AS TOTAL_QUANTITY_SOLD
FROM TRANSACTION_NEW
GROUP BY 1
ORDER BY 2 DESC;


o Discounts: Analyze the amount and impact of discounts (RETAIL_DISC,
COUPON_DISC, COUPON_MATCH_DISC) on sales value.

SELECT HOUSEHOLD_KEY, AVG(REATAIL_DISC), AVG(COUPON_DISC), AVG(COUPON_MATCH_DISC), SUM(SALES_VALUE) AS SALES
FROM TRANSACTION_NEW
GROUP BY 1
ORDER BY 1 ASC;

SELECT T.HOUSEHOLD_KEY,D.AGE_DESC,D.MARITAL_STATUS_CODE,D.INCOME_DESC,AVG(T.SALES_VALUE)AS AVG_AMOUNT,
AVG(T.REATAIL_DISC)AS AVG_RETAIL_DIS,AVG(T.COUPON_DISC)AS AVG_COUPON_DISC,AVG(T.COUPON_MATCH_DISC)AS AVG_COUP_MATCH_DISC
FROM TRANSACTION_NEW T
LEFT OUTER JOIN demographic_RAW D ON T.HOUSEHOLD_KEY =D.HOUSEHOLD_KEY
GROUP BY 1,2,3,4
ORDER BY 1;

CREATE OR REPLACE PROCEDURE Household_kpi()
RETURNS STRING
LANGUAGE SQL
AS
$$
 CREATE OR REPLACE TABLE Household_kpi AS (SELECT T.HOUSEHOLD_KEY,D.AGE_DESC,D.MARITAL_STATUS_CODE,D.INCOME_DESC,AVG(T.SALES_VALUE)AS AVG_AMOUNT,
AVG(T.RETAIL_DISC)AS AVG_RETAIL_DIS,AVG(T.COUPON_DISC)AS AVG_COUPON_DISC,AVG(T.COUPON_MATCH_DISC)AS AVG_COUP_MATCH_DISC
FROM TRANSACTION_NEW T
LEFT OUTER JOIN demographic_RAW D ON T.HOUSEHOLD_KEY =D.HOUSEHOLD_KEY
GROUP BY 1,2,3,4
ORDER BY 1);
$$;

SHOW PROCEDURES;

CALL Household_kpi();

CREATE OR REPLACE TASK  Household_kpi_TASK
WAREHOUSE = COMPUTE_WH
SCHEDULE = '5 MINUTE' 
AS CALL Household_kpi();

SHOW TASKS;

ALTER TASK   Household_kpi_TASK RESUME;
ALTER TASK  Household_kpi_TASK SUSPEND; 
 
